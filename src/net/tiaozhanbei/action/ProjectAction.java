/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package net.tiaozhanbei.action;

import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import net.tiaozhanbei.model.*;
import net.tiaozhanbei.util.FileConst;
import net.tiaozhanbei.util.Page;
import net.tiaozhanbei.util.UserConst;

import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

/** 
 * MyEclipse Struts
 * Creation date: 03-02-2009
 * 
 * XDoclet definition:
 * @struts.action
 * @struts.action-forward name="success" path="/Web/Project/project.jsp"
 */
public class ProjectAction extends BaseAction {
	/*
	 * Generated Methods
	 */
	int projectId;
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	
	private List<FileInfo> checkAuthorify(User user, List<FileInfo> files) {
		List<FileInfo> resList = new ArrayList<FileInfo>();
		for (FileInfo fileInfo : files) {
			boolean ok;
			if(user == null && fileInfo.testAccess(FileConst.COMMONUSER)){
				resList.add(fileInfo);
			}
			List<String> roles = user.getRoles();
			//作者权限和企业相同
			if(roles.contains(UserConst.Authority.AUTHOR) ||roles.contains(UserConst.Authority.COMPANY)){
				ok = fileInfo.testAccess(FileConst.COMPANY);
			}else if(roles.contains(UserConst.Authority.JUDGER)){
				ok = fileInfo.testAccess(FileConst.JUDGER);
			}else if(roles.contains(UserConst.Authority.ADMIN)){
				ok = true;
			}else 
				ok = fileInfo.testAccess(FileConst.COMMONUSER);
			
			if(ok)
				resList.add(fileInfo);
		
		}
		return resList;
		

		}
		
	/**
	 * 正常执行，返回项目及相关文件
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		projectId = Integer.parseInt(request.getParameter("projectId"));
		try{
			if(request.getParameter("ajax")==null){
				log.info("project visit");
				Project project = getProjectService().visitProject(projectId);
				if(!project.getOwner().isVerify()){
					request.setAttribute("messagekey", "error.project.authorNotVerified");
					return mapping.findForward("error");
				}
			request.setAttribute("project", project);
			request.setAttribute("projectId", projectId);

			
			User user=(User)request.getSession().getAttribute("user");


			//TODO AUTHORITY
			List<FileInfo> files= getFileInfoService().list_project(project.getId());			

			files = checkAuthorify((User)request.getSession().getAttribute("user"), files);
			request.setAttribute("files", files);
			return mapping.findForward("success");
		}else {
	
				return super.execute(mapping, form, request, response);
			
		}
		}catch(Exception e){
			System.out.println(e);
			return null;
		}
	}

	public ActionForward normalComment(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String page1 = request.getParameter("page");
		HttpSession session=request.getSession();
		int projectId=Integer.parseInt(request.getParameter("projectId"));
		Project project=getProjectService().getProject(projectId);
		User user=(User)session.getAttribute("user");
		boolean deletevisiable=false;
		boolean addmark=false;
		if(user!=null){
			
			if(project.getOwner().getId()==user.getId()){//如果是该项目作者，可以删除或者给加分
				addmark=true;
				deletevisiable=true;
			
				
				
			}
			else if(user.getRoles().contains(UserConst.Authority.ADMIN)) {//管理员只可以删除评论
				deletevisiable=true;
				
				
			}	
			
			
		}
		request.setAttribute("addmark", addmark);
		request.setAttribute("deletevisiable",deletevisiable);
		Page<ProjectComment> normalCommentList=new Page<ProjectComment>(page1);
		getProjectService().fillPageByNormalComment(normalCommentList, projectId);//通过id找到项目的普通评论
		
		request.setAttribute("projectId", projectId);
		request.setAttribute("normalCommentList",normalCommentList);
		return mapping.findForward("normal");
	}
	
	public ActionForward professorComment(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		String page2=request.getParameter("page");
		
		Page<ProjectComment> professorCommentsList=new Page<ProjectComment>(page2);
		getProjectService().fillPageByProfessorComments(professorCommentsList, projectId);
		request.setAttribute("professorCommentsList",professorCommentsList);
		return mapping.findForward("professor");
	}
	
	public ActionForward interestCompany(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		Project project = getProjectService().getProject(projectId);
		request.setAttribute("company", project.getInterestCompany());
		return mapping.findForward("interest");
	}
	
	public ActionForward focus(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response){
		User user = (User)request.getSession().getAttribute("user");
		if(user == null)
			return null;
		user = getUserService().getUserById(user.getId());
		request.setAttribute("interest", user.getInterestProjects());
		return mapping.findForward("focus");
	}
	
}